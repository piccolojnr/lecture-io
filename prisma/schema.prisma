generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Flashcard {
  id              Int       @id @default(autoincrement())
  question        String
  answer          String
  additionalNotes String?
  confidence      Int?      @default(0) // 0-5 scale for spaced repetition
  lastReviewed    DateTime?
  nextReview      DateTime?
  lectureId       Int
  topicId         Int
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  Lecture         Lecture   @relation(fields: [lectureId], references: [id], onDelete: Cascade)
  Topic           Topic     @relation(fields: [topicId], references: [id])
}

model Lecture {
  id            Int             @id @default(autoincrement())
  title         String
  content       String
  userId        String
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  user          User            @relation(fields: [userId], references: [id])
  flashcards    Flashcard[]
  Quiz          Quiz[]
  studySessions StudySession[]
  progress      StudyProgress[]
}

model Topic {
  id         Int         @id @default(autoincrement())
  name       String      @unique
  flashcards Flashcard[]
  quizzes    Quiz[]
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
}

model Quiz {
  id          Int            @id @default(autoincrement())
  title       String
  description String?
  lectureId   Int
  topicId     Int
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  Lecture     Lecture        @relation(fields: [lectureId], references: [id], onDelete: Cascade)
  Topic       Topic          @relation(fields: [topicId], references: [id])
  questions   QuizQuestion[]
  attempts    QuizAttempt[]
  options     Option[]
}

model QuizQuestion {
  id          Int      @id @default(autoincrement())
  question    String
  options     String // JSON string array of options
  answer      Int // Index of correct option
  explanation String?
  quizId      Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  Quiz        Quiz     @relation(fields: [quizId], references: [id], onDelete: Cascade)
}

model QuizAttempt {
  id        Int      @id @default(autoincrement())
  userId    String
  quizId    Int
  score     Int
  answers   String // JSON string array of user answers
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
  quiz      Quiz     @relation(fields: [quizId], references: [id], onDelete: Cascade)
}

model Option {
  id      Int     @id @default(autoincrement())
  value   String
  quizId  Int
  Quiz    Quiz    @relation(fields: [quizId], references: [id])
  correct Boolean
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String?         @unique
  emailVerified DateTime?
  password      String
  image         String?
  accounts      Account[]
  sessions      Session[]
  lectures      Lecture[]
  studySessions StudySession[]
  quizAttempts  QuizAttempt[]
  progress      StudyProgress[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model StudySession {
  userId    String
  lectureId Int
  duration  Int // Duration in seconds
  type      String // "quiz", "flashcard", or "study"
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  lecture   Lecture  @relation(fields: [lectureId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@id([userId, lectureId, type]) // Composite primary key
}

model StudyProgress {
  userId       String
  lectureId    Int
  flashcardIds Json // Array of mastered flashcard IDs
  quizScores   Json // JSON object with quiz scores over time
  lastStudied  DateTime @default(now())
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  lecture      Lecture  @relation(fields: [lectureId], references: [id])
  user         User     @relation(fields: [userId], references: [id])

  @@id([userId, lectureId]) // Composite primary key
}
