generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Lecture {
  id               Int               @id @default(autoincrement())
  title            String
  description      String?
  userId           String
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  user             User              @relation(fields: [userId], references: [id])
  topics           Topic[]
  Quizzes          Quiz[]
  flashcardSets    FlashcardSet[]
  studySessions    StudySession[]
  progresses       StudyProgress[]
  notes            Note[]
  mindMaps         MindMap[]
  aiAssistantChats AIAssistantChat[]

  @@unique([userId, title])
}

model Topic {
  id          Int     @id @default(autoincrement())
  title       String
  description String?
  lectureId   Int

  flashcards Flashcard[]
  quizzes    QuizQuestion[]
  lecture    Lecture        @relation(fields: [lectureId], references: [id], onDelete: Cascade)
  createdAt  DateTime       @default(now())
  updatedAt  DateTime       @updatedAt

  @@index([lectureId, title])
}

model FlashcardSet {
  id          Int         @id @default(autoincrement())
  title       String
  description String?     @db.Text
  lectureId   Int
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  Lecture     Lecture     @relation(fields: [lectureId], references: [id], onDelete: Cascade)
  flashcards  Flashcard[]
  quizzes     Quiz[]

  @@index([lectureId, title])
}

model Flashcard {
  id              Int          @id @default(autoincrement())
  question        String       @db.Text
  answer          String       @db.Text
  additionalNotes String?
  confidence      Int?         @default(0) // 0-5 scale for spaced repetition
  lastReviewed    DateTime?
  nextReview      DateTime?
  topicId         Int
  setId           Int
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
  Topic           Topic        @relation(fields: [topicId], references: [id])
  FlashcardSet    FlashcardSet @relation(fields: [setId], references: [id])

  @@index([topicId, setId])
}

model Quiz {
  id           Int            @id @default(autoincrement())
  title        String
  description  String?        @db.Text
  lectureId    Int
  setId        Int?
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  Lecture      Lecture        @relation(fields: [lectureId], references: [id], onDelete: Cascade)
  flashcardSet FlashcardSet?  @relation(fields: [setId], references: [id])
  questions    QuizQuestion[]
  attempts     QuizAttempt[]

  @@unique([lectureId, title])
}

model QuizQuestion {
  id          Int                @id @default(autoincrement())
  question    String
  options     QuizAnswerOption[] // One-to-many relation
  explanation String?            @db.Text
  quizId      Int
  topicId     Int
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt
  Quiz        Quiz               @relation(fields: [quizId], references: [id], onDelete: Cascade)
  Topic       Topic              @relation(fields: [topicId], references: [id])
  QuizAnswer  QuizAnswer[]

  @@unique([quizId, question])
}

model QuizAttempt {
  id        Int          @id @default(autoincrement())
  userId    String
  quizId    Int
  score     Int
  answers   QuizAnswer[] // JSON string array of user answers
  createdAt DateTime     @default(now())
  user      User         @relation(fields: [userId], references: [id])
  quiz      Quiz         @relation(fields: [quizId], references: [id], onDelete: Cascade)
}

model QuizAnswer {
  id               Int              @id @default(autoincrement())
  answerId         Int // Index of selected option
  attemptId        Int
  questionId       Int
  selected         Int? // Index of selected option
  QuizAttempt      QuizAttempt      @relation(fields: [attemptId], references: [id])
  QuizQuestion     QuizQuestion     @relation(fields: [questionId], references: [id])
  QuizAnswerOption QuizAnswerOption @relation(fields: [answerId], references: [id])

  @@index([attemptId])
  @@index([questionId])
}

model QuizAnswerOption {
  id           Int          @id @default(autoincrement())
  value        String
  questionId   Int // Reference QuizQuestion
  correct      Boolean
  QuizQuestion QuizQuestion @relation(fields: [questionId], references: [id])
  QuizAnswer   QuizAnswer[]

  @@index([questionId])
}

model User {
  id               String            @id @default(cuid())
  name             String?
  email            String?           @unique
  emailVerified    DateTime?
  password         String
  image            String?
  accounts         Account[]
  sessions         Session[]
  lectures         Lecture[]
  studySessions    StudySession[]
  quizAttempts     QuizAttempt[]
  progress         StudyProgress[]
  notes            Note[]
  mindMaps         MindMap[]
  aiAssistantChats AIAssistantChat[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model StudySession {
  userId    String
  lectureId Int
  duration  Int // Duration in seconds
  type      String // "quiz", "flashcard", or "study"
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  lecture   Lecture  @relation(fields: [lectureId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@id([userId, lectureId, type]) // Composite primary key
}

model StudyProgress {
  userId       String
  lectureId    Int
  flashcardIds Json // Array of mastered flashcard IDs
  quizScores   Json // JSON object with quiz scores over time
  lastStudied  DateTime @default(now())
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  lecture      Lecture  @relation(fields: [lectureId], references: [id])
  user         User     @relation(fields: [userId], references: [id])

  @@id([userId, lectureId]) // Composite primary key
}

model Note {
  id        String   @id @default(cuid())
  title     String   @default("Note")
  content   String   @db.Text
  lectureId Int
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  lecture   Lecture  @relation(fields: [lectureId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@index([lectureId])
  @@index([userId])
}

model MindMap {
  id        String   @id @default(cuid())
  title     String   @default("Mind Map")
  nodes     Json
  edges     Json
  lectureId Int
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  lecture   Lecture  @relation(fields: [lectureId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@index([lectureId])
  @@index([userId])
}

model AIAssistantChat {
  id        String   @id @default(cuid())
  title     String   @default("AI Assistant")
  messages  Json
  lectureId Int
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  lecture   Lecture  @relation(fields: [lectureId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@index([lectureId])
  @@index([userId])
}
